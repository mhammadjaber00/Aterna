CREATE TABLE IF NOT EXISTS QuestEventDraftEntity (
  questId TEXT NOT NULL,
  idx INTEGER NOT NULL,
  at INTEGER NOT NULL,
  type TEXT NOT NULL,
  message TEXT NOT NULL,
  xpDelta INTEGER NOT NULL DEFAULT 0,
  goldDelta INTEGER NOT NULL DEFAULT 0,
  outcome TEXT,
  PRIMARY KEY (questId, idx),
  FOREIGN KEY (questId) REFERENCES QuestLogEntity(id)
);

-- Drafts queries
insertDraftEvent:
INSERT INTO QuestEventDraftEntity (questId, idx, at, type, message, xpDelta, goldDelta, outcome)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

selectDraftsByQuest:
SELECT * FROM QuestEventDraftEntity
WHERE questId = ?
ORDER BY at ASC, idx ASC;

deleteDraftsByQuest:
DELETE FROM QuestEventDraftEntity
WHERE questId = ?;

-- Existence in Drafts
existsDraftByQuestIdx:
SELECT EXISTS(
  SELECT 1 FROM QuestEventDraftEntity WHERE questId = ? AND idx = ?
) AS present;

-- Max positive idx across BOTH drafts and events for this quest
selectMaxIdxAcrossAll:
SELECT COALESCE(MAX(idx), -1) AS max_idx
FROM (
  SELECT idx FROM QuestEventDraftEntity WHERE questId = ?
  UNION ALL
  SELECT idx FROM QuestEventEntity      WHERE questId = ?
);

-- Min idx across BOTH (for narration negatives)
selectMinIdxAcrossAll:
SELECT COALESCE(MIN(idx), 1) AS min_idx
FROM (
  SELECT idx FROM QuestEventDraftEntity WHERE questId = ?
  UNION ALL
  SELECT idx FROM QuestEventEntity      WHERE questId = ?
);