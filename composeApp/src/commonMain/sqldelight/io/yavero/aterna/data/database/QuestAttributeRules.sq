-- Data-driven mapping from questType + duration band â†’ APXP deltas per attribute
CREATE TABLE IF NOT EXISTS QuestAttributeRuleEntity (
  questType   TEXT    NOT NULL,
  minDuration INTEGER NOT NULL CHECK(minDuration >= 0),
  maxDuration INTEGER NOT NULL CHECK(maxDuration >= 0),
  attribute   TEXT    NOT NULL CHECK(attribute IN (
    'STRENGTH','PERCEPTION','ENDURANCE','CHARISMA','INTELLIGENCE','AGILITY','LUCK'
  )),
  delta       INTEGER NOT NULL,
  CHECK (maxDuration >= minDuration),
  PRIMARY KEY (questType, minDuration, maxDuration, attribute)
);

CREATE INDEX IF NOT EXISTS idx_rule_type_band
  ON QuestAttributeRuleEntity(questType, minDuration, maxDuration);

CREATE INDEX IF NOT EXISTS idx_rule_type_attribute
  ON QuestAttributeRuleEntity(questType, attribute);

rules_selectForQuest:
SELECT attribute, delta
FROM QuestAttributeRuleEntity
WHERE questType = ?
  AND ? BETWEEN minDuration AND maxDuration
ORDER BY attribute ASC;

rules_selectAggregateForQuest:
SELECT
  COALESCE(SUM(CASE WHEN attribute = 'STRENGTH'     THEN delta END), 0) AS d_strength,
  COALESCE(SUM(CASE WHEN attribute = 'PERCEPTION'   THEN delta END), 0) AS d_perception,
  COALESCE(SUM(CASE WHEN attribute = 'ENDURANCE'    THEN delta END), 0) AS d_endurance,
  COALESCE(SUM(CASE WHEN attribute = 'CHARISMA'     THEN delta END), 0) AS d_charisma,
  COALESCE(SUM(CASE WHEN attribute = 'INTELLIGENCE' THEN delta END), 0) AS d_intelligence,
  COALESCE(SUM(CASE WHEN attribute = 'AGILITY'      THEN delta END), 0) AS d_agility,
  COALESCE(SUM(CASE WHEN attribute = 'LUCK'         THEN delta END), 0) AS d_luck
FROM QuestAttributeRuleEntity
WHERE questType = ?
  AND ? BETWEEN minDuration AND maxDuration;

rules_selectForQuestType:
SELECT *
FROM QuestAttributeRuleEntity
WHERE questType = ?
ORDER BY minDuration ASC, maxDuration ASC, attribute ASC;

rules_selectAll:
SELECT *
FROM QuestAttributeRuleEntity
ORDER BY questType ASC, minDuration ASC, maxDuration ASC, attribute ASC;

rules_upsert:
INSERT OR REPLACE INTO QuestAttributeRuleEntity
(questType, minDuration, maxDuration, attribute, delta)
VALUES (?, ?, ?, ?, ?);

rules_deleteByQuestType:
DELETE FROM QuestAttributeRuleEntity
WHERE questType = ?;

rules_deleteBand:
DELETE FROM QuestAttributeRuleEntity
WHERE questType = ?
  AND minDuration = ?
  AND maxDuration = ?;

rules_deleteBandAttribute:
DELETE FROM QuestAttributeRuleEntity
WHERE questType = ?
  AND minDuration = ?
  AND maxDuration = ?
  AND attribute = ?;

rules_clearAll:
DELETE FROM QuestAttributeRuleEntity;